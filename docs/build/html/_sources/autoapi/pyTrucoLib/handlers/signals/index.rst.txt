:py:mod:`pyTrucoLib.handlers.signals`
=====================================

.. py:module:: pyTrucoLib.handlers.signals


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyTrucoLib.handlers.signals.signals




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyTrucoLib.handlers.signals.__author__
   pyTrucoLib.handlers.signals.__email__
   pyTrucoLib.handlers.signals.__status__
   pyTrucoLib.handlers.signals.__date__


.. py:data:: __author__
   :annotation: = Lautaro Linquiman



.. py:data:: __email__
   :annotation: = acc.limayyo@gmail.com



.. py:data:: __status__
   :annotation: = Developing



.. py:data:: __date__
   :annotation: =  04/08/16



.. py:class:: signals

   Bases: :py:obj:`abc.ABC`

   Esta clase almacena los eventos que se disparan a medida que se
   va ejecuntado el juego.

   Como mostrar mensajes, dar cartas etc.

   Esta clase es de ejemplo

   .. py:attribute:: players
      :annotation: :list = []



   .. py:attribute:: teams
      :annotation: = []



   .. py:method:: showMsgStartGame(self)

      Esta funcion se dispara cuando se inicia un nuevo juego
      :param players:


   .. py:method:: sendMessageAll(self, msg)


   .. py:method:: sendMessageToPlayer(self, player, msg)


   .. py:method:: start_new_round(self)

      Esta funcion se dispara cuando se inicia una nueva ronda



   .. py:method:: start_new_hand(self, handsNumber)

      Esta funcion se llama cada vez que se inicia una nueva mano
      :param handsNumber: int


   .. py:method:: showMsgFinishHand(self)

      Esta funcion se dispara cuando finaliza una mano



   .. py:method:: showMsgFinishRound(self)

      Esta funcion se dispara cuando finaliza una ronda



   .. py:method:: showMsgFinishGame(self)

      Esta funcion se dispara cuando finaliza un juego



   .. py:method:: giveCards(self, playerid, cards)

      Esta funcion se dispara cuando se reparten las cartas,
      recibe como parametro el playerid y las cartas del jugador
      :param playerid:
      :param cards: list cardsObjects
      Ejemplo de uso:
      partida.mostrarCartas(player, cards)


   .. py:method:: showCards(self, player, cards)

      Esta funcion se dispara cuando se le muestran las cartas al jugador
      params
      :param playerid:
      :param cards: list cardsObjects


   .. py:method:: show_points_for_team(self, team, pointsTeam)

      Esta funcion se dispara cuando se muestran los puntos de los equipos
      :param team: int teamID
      :param pointsTeam: int
      Ejemplo de uso:


   .. py:method:: getActionPlayer(self, playerObject, action='')

      Esta funcion se llama cuando se tiene que obtener un
      accion del jugador


      :param playerObject:
      :param gameInfo: contiene informaciÃ³n del juego

      :return:Esta funcion entrega informacion del estado
      juego en la variable infoGame
      :rtype: list


      Ejemplo:
      accion = raw_input("Escriba la accion o carta a jugar>")
      return accion(accion, valorAccion)

      Acciones[JugadorCarta, envido, real envido,
       falta envido, truco, re truco, vale 4]

      formato de respuesta: (accion, valor)


   .. py:method:: showCardPlaying(self, teamObject, playerObject, cardObject)

      Esta funcion se llama cuando se juega una carta
      :param teamObject:
      :param playerObject:
      :param cardObject:
      Ejemplo:


   .. py:method:: showError(self, playerObject, errorName)

      Esta funcion se llama cuando ocurre un error por un jugador
      :param playerObject:
      :param errorName: str ['cardPlayerd', 'invalidAction']
      Ejemplo:


   .. py:method:: showResultaTheHand(self, playerid, playername, teamid, cardObject)

      Esta funcion se llama cuando termina una mano

      :param playerid: int
      :param playername: str Nombre del jugador
      :param teamid: int
      :param cardObject:
      Ejemplo:


   .. py:method:: Parda(self)

      Esta funcion se llama cuando termina la mano y hay una parda

      none


   .. py:method:: returnStatus(self, statusGame)

      Esta funcion se llama cada vez que se busca un ganador
      :param statusGame: [StatusGame=(win,empate), teamWinner],
       [StatusGame=empate, CartaMayor],
       [StatusGame=continue, CartaMayor, playerid]


   .. py:method:: winEmpate(self, teamIDWinner)

      Esta funcion se llama cuando ocurre un empate

      :param teamIDWinner: int


   .. py:method:: win(self, teamIDWinner)

      Esta funcion se llama cuando se gana la ronda

      :param teamIDWinner: int


   .. py:method:: winGameTeam(self, teamObject)

      Esta funcion se llama cuando un equipo gana el juego

      :param teamObject:


   .. py:method:: quiero(self, playerObject)

      Esta funcion se llama cuando un jugador quiere a un canto

      :param playerObject:


   .. py:method:: noquiero(self, playerObject)

      Esta funcion se llama cuando un jugador no quiere a un canto

      :param playerObject:


   .. py:method:: startLoopEnvido(self)

      Esta funcion se llama cuando se inicia el loop del envido


   .. py:method:: finishLoopEnvido(self)

      Esta funcion se llama cuando finaliza el loop del envido


   .. py:method:: envido(self, playerObject)

      Esta funcion se llama cuando alguien canta envido
      :param playerObject:


   .. py:method:: showEnvido(self, playerObject)

      Esta funcion se llama cuando un jugar canta su envido
      :param playerObject:


   .. py:method:: showWinnerEnvido(self, playerObject)

      Esta funcion se llama cuando se define un ganador del envido
      :param playerObject:


   .. py:method:: setPlayers(self, playerObject)


   .. py:method:: truco(self, player)
      :abstractmethod:


   .. py:method:: retruco(self, player)
      :abstractmethod:


   .. py:method:: vale_4(self, player)
      :abstractmethod:
